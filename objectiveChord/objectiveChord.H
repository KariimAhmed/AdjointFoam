/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | www.openfoam.com
     \\/     M anipulation  |
-------------------------------------------------------------------------------
    Copyright (C) 2007-2019 PCOpt/NTUA
    Copyright (C) 2013-2019 FOSS GP
    Copyright (C) 2019-2020 OpenCFD Ltd.
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.


Class
    Foam::objectives::objectiveChord

Description

SourceFiles
   objectiveChord.C

\*---------------------------------------------------------------------------*/

#ifndef objectiveChord_H
#define objectiveChord_H

#include "objectiveIncompressible.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

namespace objectives
{

/*---------------------------------------------------------------------------*\
                   Class objectiveChord Declaration
\*---------------------------------------------------------------------------*/

class objectiveChord
:
    public objectiveIncompressible
{
    // Private data

        scalar initThick_;
        labelHashSet objectivePatches_;


public:

    //- Runtime type information
    TypeName("partialChord");


    // Constructors

        //- from components
        objectiveChord
        (
            const fvMesh& mesh,
            const dictionary& dict,
            const word& adjointSolverName,
            const word& primalSolverName
        );


    //- Destructor
    virtual ~objectiveChord() = default;


    // Member Functions

        //- Return the objective function value
        scalar J();

        //- Update d (x) / db multiplier. Surface and volume-based sensitivity
        //- term
        void update_dxdbDirectMultiplier();

        //- Update d (normal dS) / db multiplier. Surface and volume-based
        //- sensitivity term
        void update_dSdbMultiplier();

        //- Write objective function history
        virtual bool write(const bool valid = true) const;
};


// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

} // End namespace objectiveChord
} // End namespace Foam

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#endif

// ************************************************************************* //
